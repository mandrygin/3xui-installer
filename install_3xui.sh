#!/usr/bin/env bash
set -euo pipefail
trap 'echo "‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO: $BASH_COMMAND" >&2' ERR

# ---------- –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ó –ê–†–ì–£–ú–ï–ù–¢–û–í ----------
user="${user:-}"; pass="${pass:-}"; port="${port:-}"; WEB_BASEPATH="${webBasePath:-/}"
for kv in "$@"; do
  case "$kv" in
    user=*) user="${kv#*=}" ;;
    pass=*) pass="${kv#*=}" ;;
    port=*) port="${kv#*=}" ;;
    webBasePath=*) WEB_BASEPATH="${kv#*=}" ;;
  esac
done
PANEL_USER="${user:-admin}"
PANEL_PASS="${pass:-$(tr -dc 'A-Za-z0-9!@#\$%_' </dev/urandom | head -c 14)}"
PANEL_PORT="${port:-2053}"

UI="/usr/local/x-ui/x-ui"         # –±–∏–Ω–∞—Ä—å –ø–∞–Ω–µ–ª–∏
CFG="/usr/local/x-ui/bin/config.json"

log(){ echo -e "$@"; }
die(){ echo -e "‚ùå $@" >&2; exit 1; }
need_root(){ [[ $EUID -eq 0 ]] || die "–ó–∞–ø—É—Å—Ç–∏ –æ—Ç root (sudo -i)."; }

pkg_install(){
  log "üîπ –ü–∞–∫–µ—Ç—ã‚Ä¶"
  DEBIAN_FRONTEND=noninteractive apt update -y
  DEBIAN_FRONTEND=noninteractive apt upgrade -y
  DEBIAN_FRONTEND=noninteractive apt install -y curl wget sudo ufw unzip git jq sqlite3 ca-certificates || true
}

install_3xui(){
  log "üîπ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ 3X-UI‚Ä¶"
  tmp="$(mktemp)"
  curl -fsSL --retry 3 --connect-timeout 20 https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh -o "$tmp"
  bash "$tmp"
  rm -f "$tmp"

  [[ -x "$UI" ]] || die "–ù–µ –Ω–∞–π–¥–µ–Ω –±–∏–Ω–∞—Ä—å $UI –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
  # —Å—Ç–∞—Ä—ã–π –≤–Ω–µ—à–Ω–∏–π —Ñ—Ä–æ–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
  [[ -d /usr/local/x-ui/web ]] && rm -rf /usr/local/x-ui/web || true

  systemctl daemon-reload || true
  "$UI" enable || true
  "$UI" start  || true
}

wait_ready(){
  # –∂–¥—ë–º, –ø–æ–∫–∞ x-ui –Ω–∞—á–Ω—ë—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ CLI
  for i in {1..40}; do
    "$UI" setting -show >/dev/null 2>&1 && return 0
    sleep 1
  done
  die "x-ui –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ CLI."
}

port_taken_by_other(){
  ss -lntp 2>/dev/null | awk -v p=":$1" '$4 ~ p {print $0}' | grep -qv x-ui || return 1
}

pick_free_port(){
  for i in {1..50}; do
    p="$(shuf -i 1025-65535 -n 1)"
    ss -lnt 2>/dev/null | grep -q ":$p " || { echo "$p"; return 0; }
  done
  echo 2053
}

apply_panel_settings(){
  log "üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å/–ø–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏‚Ä¶"

  # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç –Ω–µ x-ui ‚Äî –ø–æ–¥–±–µ—Ä—ë–º —Å–≤–æ–±–æ–¥–Ω—ã–π
  if port_taken_by_other "$PANEL_PORT"; then
    newp="$(pick_free_port)"
    log "‚ö†Ô∏è –ü–æ—Ä—Ç $PANEL_PORT –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –°—Ç–∞–≤–ª—é $newp"
    PANEL_PORT="$newp"
  fi

  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ö–õ–Æ–ß=–ó–ù–ê–ß–ï–ù–ò–ï
  "$UI" setting -username="$PANEL_USER" -password="$PANEL_PASS" -port="$PANEL_PORT" -webBasePath="$WEB_BASEPATH"

  # –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if ! "$UI" setting -show | grep -q "port: $PANEL_PORT"; then
    "$UI" setting -show >&2 || true
    die "x-ui –Ω–µ –ø—Ä–∏–Ω—è–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏."
  fi

  systemctl restart x-ui
  sleep 2
}

ensure_listen(){
  log "üîπ –ü—Ä–æ–≤–µ—Ä—è—é, —á—Ç–æ x-ui —Å–ª—É—à–∞–µ—Ç $PANEL_PORT‚Ä¶"
  for i in {1..30}; do
    ss -lntp 2>/dev/null | grep -q ":$PANEL_PORT .*x-ui" && return 0
    sleep 1
  done
  die "–ü–∞–Ω–µ–ª—å –Ω–µ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç $PANEL_PORT."
}

open_firewall(){
  log "üîπ –û—Ç–∫—Ä—ã–≤–∞—é UFW‚Ä¶"
  ufw allow 22/tcp  >/dev/null 2>&1 || true
  ufw allow 443/tcp >/dev/null 2>&1 || true
  ufw allow 2096/tcp >/dev/null 2>&1 || true
  ufw allow "$PANEL_PORT"/tcp >/dev/null 2>&1 || true
  ufw --force enable >/dev/null 2>&1 || true
}

patch_xray_routing(){
  log "üîπ –ü–∞—Ç—á—É Xray-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é (BT/private ‚Üí block; RU ‚Üí direct; Google/OpenAI/Meta ‚Üí WARP)‚Ä¶"

  mkdir -p "$(dirname "$CFG")"
  [[ -s "$CFG" ]] || cat >"$CFG" <<'JSON'
{ "log":{"loglevel":"warning"}, "dns":null, "inbounds":[], "outbounds":[], "routing":{"domainStrategy":"IPIfNonMatch","rules":[]} }
JSON

  tmpcfg="$(mktemp)"
  jq '
    .dns = {"servers":["1.1.1.1","8.8.8.8"]} |

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º outbounds direct/blackhole
    .outbounds = (
      ( [.outbounds[]? | select(.protocol=="freedom")] + [{"protocol":"freedom","tag":"direct"}] ) | unique_by(.protocol)
      + ( [.outbounds[]? | select(.protocol=="blackhole")] + [{"protocol":"blackhole","tag":"block"}] ) | unique_by(.protocol)
    ) |

    # –¥–æ–±–∞–≤–∏–º/–æ–±–Ω–æ–≤–∏–º warp (wireguard)
    .outbounds = (
      [.outbounds[]? | select(.tag!="warp")] + [{
        "protocol":"wireguard","tag":"warp",
        "settings":{"address":["172.16.0.2/32"],"peers":[{"publicKey":"bmXOC+F1FxEMF9dyiK2H5Fz3x3o6r8fVq5u4i+L5rHI=","endpoint":"162.159.193.10:2408"}],"mtu":1280}
      }]
    ) |

    .routing.domainStrategy = "IPIfNonMatch" |
    .routing.rules = (
      [
        .routing.rules[]? |
        select(
          (.protocol? // [] | index("bittorrent") | not)
          and (.ip? // [] | index("geoip:private") | not)
          and (.ip? // [] | index("geoip:ru") | not)
          and (.domain? // [] | index("geosite:ru") | not)
          and (.domain? // [] | (index("geosite:google") or index("geosite:openai") or index("geosite:meta")) | not)
        )
      ]
      + [
        {"type":"field","protocol":["bittorrent"],"outboundTag":"block"},
        {"type":"field","ip":["geoip:private"],"outboundTag":"block"},
        {"type":"field","ip":["geoip:ru"],"outboundTag":"direct"},
        {"type":"field","domain":["geosite:ru"],"outboundTag":"direct"},
        {"type":"field","domain":["geosite:google","geosite:openai","geosite:meta"],"outboundTag":"warp"}
      ]
    )
  ' "$CFG" > "$tmpcfg"

  mv "$tmpcfg" "$CFG"
  chmod 644 "$CFG"
  systemctl restart x-ui || true
  sleep 1
}

print_access(){
  local LAN PUB; LAN="$(hostname -I 2>/dev/null | awk '{print $1}' || true)"
  PUB="$(curl -fsS ipv4.icanhazip.com 2>/dev/null || true)"
  echo
  echo "=========================================="
  echo "‚úÖ 3X-UI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
  [[ -n "$LAN" ]] && echo "üåê –õ–æ–∫–∞–ª—å–Ω–æ: http://$LAN:$PANEL_PORT$WEB_BASEPATH"
  [[ -n "$PUB" ]] && echo "üåê –°–Ω–∞—Ä—É–∂–∏:  http://$PUB:$PANEL_PORT$WEB_BASEPATH"
  echo "üë§ –õ–æ–≥–∏–Ω:  $PANEL_USER"
  echo "üîë –ü–∞—Ä–æ–ª—å: $PANEL_PASS"
  echo "------------------------------------------"
  echo "–§–∞–π–ª Xray-–∫–æ–Ω—Ñ–∏–≥–∞: $CFG"
  echo "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏:"
  "$UI" setting -show || true
  echo "=========================================="
}

# ---------- MAIN ----------
need_root
pkg_install
install_3xui
wait_ready
apply_panel_settings
ensure_listen
open_firewall
patch_xray_routing
print_access
